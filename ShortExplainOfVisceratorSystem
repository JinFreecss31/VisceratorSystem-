Hello! Here i will shortly explain how viscerator system works overall.
First of all, let me quickly describe options viscerator have 
1.You can place viscerator on your back if it is close enough (basically i am using Teleporting of part but its purpose is to be "attached" to back of character)
2.You can as well take it out(in both of these two examples it meant to almost instantly appear right behind the player)
3.Fly to spot player gave to Viscerator if distance is not too far from Character and Visc able to fly here
4.Attack Closest person will simply find the closest person to viscerator which can be reached by him (respecting max distance of viscerator can attack to)
5.Attack Chosen person will simply do what is stated, owner of viscerator can simply point mouse on enemy and click, if all requirements were met successfully,, Viscerator will start to attack person until they are run out of distance/died or ran behind obstacle which cannot be reached by Viscerator!
6.Attack enemies team will create some type of memory for Viscerator so it can remember those who are rebelions or anticitizens and attack them again if they appear to be close enough to viscerator while this option active, also Viscerator will time to time doing checks to see if new targets must be added to list or old ones removed. If person dies by any reason, it then removed from list. If viscerator spot civilian with gun, they will be added to list! All rebels are to be put to list on sight.
7.Follow Character probably the most consuming and complex option, if in short, Viscerator will simply follow character anywhere it can reach.
Now, time to explain the rest parts of viscerator system.
I've chose to use server side only for Spawn/Despawn Viscerator, use NetworkOwnership on Viscerator part to give to host, and to register attacks on certain targets respecting to Distance between Visc and Target, Target Team and Cooldown Viscerator must wait before can do next attack!
The rest will be stored and running on Client side. Therefore When viscerator doing certain actions like follow character, create and find new Path, fly to spot and choose target to attack, all of those functions will run on client side but will be clearly visible
on server side! 
Now last part, here i want to talk about two important functions which were used to make viscerator useful.
1.Attack Players, when player choose option to AttackOppositeTeamEnemies, viscerator will check for all players whom can reach and check if they are rebelions or civilians who have gun equipped, of so, Viscerator will add them to list of enemies whom it should attack on sight.
Then it will find the closest person from enemies list whom can reach and attack them! Whenever New iteration of check for enemies starts, it will check if Enemies in list are left the server of dead, to remove them from list. 
2.Follow Character and finding new path. After some time of testings i came to conlusion that best way for create effective and not much resources consuming system, is to use few methods in combination. 1.Raycasting, 2.Pathfinding and 3.Tiles
raycasting will help to either way determine if Viscerator can fly to character without using pathfinding or when using pathfinding to lower goal position closer to ground (sadly but biggest in built pathfinding issue it is not respecting to Jump Height and State...)
Now Tiles system, i came to tricky solution of spawning and updating tiles based on current character position, in order they were spawned and last time used (updated) so then can pretty easy and with high accuracy chances find path uisng simple logic. If big character reached certain position, why much smaller Viscerator following the same path cannot?
So for the pathfinding, in cases where raycasting did not help to reach character, system will quickly grab all existing tiles and in order they were last time updated, start create pathfinding from each of them and check if path found, if no then get one previous tile and repeat the same process until path found!
Finally, when new path updated it will clear all no longer needed tiles, in case too much tiles were spawned at the same time, system will clear half of them by deleting every second tile in order they were last time updated, it will help to decrease total count of tiles but at the same time keep accuracy as high as can!
If by unknown reason Viscerator cannot reach path for too long, limits are implemented, in case New path of viscerator wasn't updated for certain time or Viscerator is way too far from Character, it will automatically Teleport to player and continue its duties as should!
And that is all i wanted to tell about viscerator system i've created! (Oh last moment, in case path were found by viscerator failed to reach final position, system will automatically update or create tile at which viscertator happened to stay and as well remove unnecessary tiles!
